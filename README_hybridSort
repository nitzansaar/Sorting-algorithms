My hybrid sort function works just like my randomized quick sort function except that when the array size
becomes less than or equal to the threshold ( I chose 10 as my threshold ), it finishes the sorting with insertion sort.
Here are the steps:
1. Check if the low index is less than the high index, array size is 1 or less it is already sorted (base case)
2. Check if the array size is less than threshold
3. If the array size is less than the threshold, we do insertion sort from lowindex to highindex
4. If the array size is greater than the threshold, we get a pivot index by calling the partition method,
then we recursively call hybrid sort on (lowindex, pivotIndex - 1) and on (pivotIndex + 1, highindex)
- note : we don't need to sort the pivotIndex because the partition sorts it for us

Test Results:
- I tested Randomized Quick Sort and Hybrid Sort on arrays of sizes (10, 100, 1000, 10000, 100000, 1000000, 10000000).
I found that the hybrid sort is consistently faster for random arrays, sorted arrays, and inverse arrays for all sizes besides 100000.
For array size of 100000, sometimes quick sort ran faster for sorted and inverse arrays by an extremely small time difference. I would estimate
around 50% of the time. The efficiency of hybrid sort becomes very visible for random arrays with 10 million elements where I saw hybrid sort
run much faster, often by over 1 second. Here is an example from my results:
Array size: 10000000
Array of random numbers:
Hybrid is faster by: 1.1073344349999994s
Array of sorted numbers:
Hybrid is faster by: 0.30244347699999996s
Array of inverse numbers:
Hybrid is faster by: 0.3648369130000001s

- As you can see, hybrid sort is the more efficient sorting algorithm.




