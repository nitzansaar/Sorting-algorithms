My hybrid sort function works just like my randomized quick sort function except that when the array size
becomes less than or equal to the threshold ( I chose 11 as my threshold ), it finishes the sorting with insertion sort.
Here are the steps:
1. Check if the low index is less than the high index, array size is 1 or less it is already sorted (base case)
2. Check if the array size is less than threshold
3. If the array size is less than the threshold, we do insertion sort
4. If the array size is greater than the threshold, we get a pivot index by calling the partition method,
then we recursively call hybrid sort on (lowindex, pivotIndex - 1) and on (pivotIndex + 1, highindex)
- note : we don't need to sort the pivotIndex because the partition sorts it for us

Test Results:
- On arrays of sizes (10, 100, 1000, 10000) the hybrid sort is consistently faster for random arrays,
sorted arrays, and inverse arrays. However when I introduce array sizes of 100000 or greater, the results are
less consistent and quick sort runs faster more often for sorted and inverse arrays but hybrid sort runs faster
for random arrays. However, the time difference is extremely small.



